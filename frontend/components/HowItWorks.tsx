"use client";

import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Keyboard3D from "./Keyboard3D";

interface Step {
  id: number;
  title: string;
  description: string;
  image?: string;
}

const steps: Step[] = [
  {
    id: 1,
    title: "Request Initaition",
    description: "User submits an AI inference request through our secure API endpoint. All data is encrypted end-to-end before transmission, ensuring privacy from the moment it leaves the user's device.",
  },
  {
    id: 2,
    title: "Model Sharding",
    description: "The large language model is automatically partitioned across multiple Trusted Execution Environment (TEE) nodes in our decentralized network, distributing computational load while maintaining security guarantees.",
  },
  {
    id: 3,
    title: "Secure Processing",
    description: "Each TEE processes its assigned model shard in a completely isolated and verifiable environment. This ensures that even node operators cannot access or modify the data or model weights during computation.",
  },
  {
    id: 4,
    title: "Attestation",
    description: "Cryptographic proofs of secure execution are generated by each TEE and verified on-chain through our consensus mechanism. This provides mathematical guarantees that the computation was performed correctly without compromise.",
  },
  {
    id: 5,
    title: "Result Aggregation",
    description: "The processed outputs from all TEE nodes are securely combined and returned to the user with full verifiability. A comprehensive proof of the entire execution chain is provided alongside the inference result.",
  },
];

export const HowItWorks = () => {
  const [currentStep, setCurrentStep] = useState(0);
  const [highlightedCard, setHighlightedCard] = useState<number | null>(null);

  // Handle keyboard key press
  const handleKeyPress = (keyNumber: number) => {
    if (keyNumber >= 1 && keyNumber <= 5) {
      const stepIndex = keyNumber - 1; // Convert to 0-based index
      setCurrentStep(stepIndex);
      
      // Temporarily highlight the card
      setHighlightedCard(keyNumber);
      setTimeout(() => setHighlightedCard(null), 1000);
    }
  };

  // Updated navigation functions with limits
  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep((prev) => prev + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep((prev) => prev - 1);
    }
  };

  // Add disabled states for buttons
  const isFirstStep = currentStep === 0;
  const isLastStep = currentStep === steps.length - 1;

  return (
    <section className="py-24 bg-white">
      <div className="max-w-7xl mx-auto px-6">
        <div className="mb-20">
          <h2 className="font-mono text-[72px] font-bold mb-6">
            How It Works
          </h2>
          <p className="font-mono text-xl text-gray-600 uppercase tracking-wider">
            Experience seamless AI interface through our revolutionary TEE-based architecture
          </p>
        </div>

        <div className="grid grid-cols-2 gap-10">
          {/* Left: Content Display Card Container */}
          <div className="bg-white border-2 border-black shadow-lg rounded-none p-6 h-[500px] flex flex-col">
            {/* Card Header */}
            <div className="border-b-2 border-black pb-4 mb-6 mt-0">
              <div className="flex justify-between items-start">
                <span className="font-mono text-8xl font-bold text-black">
                  {String(currentStep + 1).padStart(2, '0')}
                </span>
                <div className="text-right">
                  <h3 className="font-mono text-3xl font-bold uppercase text-black">
                    {steps[currentStep].title}
                  </h3>
                </div>
              </div>
            </div>

            {/* Card Content */}
            <div className="flex-grow">
              <p className="font-mono text-l leading-relaxed text-gray-700 mb-4">
                {steps[currentStep].description}
              </p>
              
              {/* Progress Indicators */}
              <div className="flex space-x-2 mb-4">
                {steps.map((_, index) => (
                  <div
                    key={index}
                    className={`w-3 h-3 border border-black ${
                      index === currentStep 
                        ? 'bg-black' 
                        : index < currentStep 
                        ? 'bg-gray-400' 
                        : 'bg-white'
                    }`}
                  />
                ))}
              </div>
            </div>

            {/* Card Navigation */}
            <div className="flex items-center justify-between border-t-2 border-black pt-4 mt-auto">
              <button 
                onClick={prevStep}
                disabled={isFirstStep}
                className={`px-4 py-2 border-2 border-black font-mono text-l font-bold transition-colors ${
                  isFirstStep 
                    ? 'opacity-50 cursor-not-allowed bg-gray-100' 
                    : 'hover:bg-black hover:text-white bg-white'
                }`}
              >
                ← PREV
              </button>

              <div className="font-mono text-xs text-gray-600">
                {String(currentStep + 1).padStart(2, '0')} / {String(steps.length).padStart(2, '0')}
              </div>

              <button 
                onClick={nextStep}
                disabled={isLastStep}
                className={`px-4 py-2 border-2 border-black font-mono text-l font-bold transition-colors ${
                  isLastStep 
                    ? 'opacity-50 cursor-not-allowed bg-gray-100' 
                    : 'hover:bg-black hover:text-white bg-white'
                }`}
              >
                NEXT →
              </button>
            </div>
          </div>

          {/* Right: Interactive Keyboard */}
          <div className="flex items-center justify-center h-[500px] relative">
            <Keyboard3D onKeyPress={handleKeyPress} />
            {/* Watermark overlay */}
            <div className="absolute -bottom-8 right-0 w-40 h-10 bg-white z-20 flex items-end justify-end">
              <div className="font-mono text-xs text-gray-400"></div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};